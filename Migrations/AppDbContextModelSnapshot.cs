// <auto-generated />
using System;
using HandshakesByDC_BEAssignment.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HandshakesByDC_BEAssignment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("HandshakesByDC_BEAssignment.Models.Carpark", b =>
                {
                    b.Property<string>("CarparkNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CarParkBasement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CarParkDecks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarParkType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FreeParking")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("GantryHeight")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NightParking")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortTermParking")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeOfParkingSystem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("XCoord")
                        .HasColumnType("REAL");

                    b.Property<float>("YCoord")
                        .HasColumnType("REAL");

                    b.HasKey("CarparkNo");

                    b.ToTable("Carparks");
                });

            modelBuilder.Entity("HandshakesByDC_BEAssignment.Models.CarparkImportLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SuccessfulRecords")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalRecords")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CarparkImportLogs");
                });

            modelBuilder.Entity("HandshakesByDC_BEAssignment.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HandshakesByDC_BEAssignment.Models.UserFavorite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarparkNo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "CarparkNo");

                    b.HasIndex("CarparkNo");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("HandshakesByDC_BEAssignment.Models.UserFavorite", b =>
                {
                    b.HasOne("HandshakesByDC_BEAssignment.Models.Carpark", "Carpark")
                        .WithMany("FavoritedBy")
                        .HasForeignKey("CarparkNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandshakesByDC_BEAssignment.Models.User", "User")
                        .WithOne("Favorite")
                        .HasForeignKey("HandshakesByDC_BEAssignment.Models.UserFavorite", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carpark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HandshakesByDC_BEAssignment.Models.Carpark", b =>
                {
                    b.Navigation("FavoritedBy");
                });

            modelBuilder.Entity("HandshakesByDC_BEAssignment.Models.User", b =>
                {
                    b.Navigation("Favorite")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
